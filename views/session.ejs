<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Session</title>
    <link rel='stylesheet' href='/stylesheets/bootstrap.min.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
</head>
<body>
    <div class="header">
        <%- include('partials/guest_navbar');%>
    </div>
    <%
        if(session) { %>
        <div class="row session-panel">
            <div class="col-md-7 col-sm-6 video">
                <input type="hidden" id="videoId" value="<%= session.videoId%>">
                <input type="hidden" id="sessionId" value="<%= session.sessionId%>">
                <input type="hidden" id="userName" value="<%= user.username%>">
                <input type="hidden" id="userId" value="<%= user.id%>">
                <input type="hidden" id="isAdmin" value="<%= isAdmin%>">
                <!--            <h2>Video Display</h2>-->
                <div id="player" style="pointer-events: none;" ></div> <br>
                <div class="row" id="controls">
                    <div class="col-md-2 col-sm-12">
                        <button id="playBtn">
                            <svg class="bi bi-play-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 010 1.393z" style="color: #007bff;"/>
                            </svg>
                        </button>
                        <button id="pauseBtn">
                            <svg class="bi bi-pause-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                <path d="M5.5 3.5A1.5 1.5 0 017 5v6a1.5 1.5 0 01-3 0V5a1.5 1.5 0 011.5-1.5zm5 0A1.5 1.5 0 0112 5v6a1.5 1.5 0 01-3 0V5a1.5 1.5 0 011.5-1.5z" style="color: #007bff;"/>
                            </svg>
                        </button>

                    </div>
                    <div class="col-md-10 col-sm-12">
                        <div class="slidecontainer">
                            <input type="range" min="0" max="100" value="0" class="slider" id="myRange">
                        </div>
                    </div>
                </div>

            </div>
             <div class="col-md-4 offset-md-1 col-sm-5">
                <div class="card users-panel">
                    <div class="card-header" id="connected-users-text">
                        Connected Users
                    </div>
                    <ul class="list-group list-group-flush" id="connected-users">
                        <%
                           if(session.connectedUsers.length > 0) {
                                   session.connectedUsers.forEach((user) => { %>
                                   <li class="list-group-item connected-user"><%= user.username %></li>
                                <%   });
                           }else { %>
                               <p class="text-center">No Connected Users</p>
                           <% }
                            %>
                    </ul>
                    <div class="card-footer">
                        <%= session.adminId.username%>
                    </div>
                    <br>
                </div>
                 <% if(isAdmin === true){%>
                 <div class="input-group mb-3" style="padding: 5px;">
                     <input type="text" class="form-control" id="link-field" readonly placeholder="link" aria-label="Recipient's username" aria-describedby="button-addon2">
                     <div class="input-group-append">
                         <button class="btn btn-outline-secondary copyLink" data-clipboard-target="#link-field" type="button" id="button-addon2">Copy Link</button>
                     </div>
                 </div>
                 <button class="btn btn-primary" id="endSession">End Session</button>
                 <%}%>
            </div>
        </div>
    <%    }else{ %>
                <h3>
                    Invalid SessionId Passed
                </h3>
  <%  }
    %>


    <script src="/javascripts/jquery-3.4.1.js"></script>
    <script src="/javascripts/bootstrap.min.js"></script>
    <script src="/javascripts/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.4/clipboard.min.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script>
        // TODO:: Handle when a user leaves the session
        console.log($('#connected-users'));
        const isAdmin = $('#isAdmin').val();
        console.log(typeof isAdmin);
        if (isAdmin === 'false') {
            $('#controls').hide();
        }else {
            $('#link-field').val(window.location.href);
        }
        const userName = $('#userName').val();
        const sessionId = $('#sessionId').val();
        const userId = $('#userId').val();
        const socket = io(`?username=${userName}`);
        socket.on('connect', function() {
            socket.emit('join:session', { sessionId, userId});
            // get list of connected users
            axios.get(`/sessions/${sessionId}/users`).then((res) => {
                const users = res.data.message;
                console.log('connected users on joinin', users);
                if(users.length > 0) {
                    let htmlContent = '';
                    users.forEach((user) => {
                        htmlContent += `
                <li class="list-group-item connected-user">${user}</li>`
                    })
                    $('#connected-users').html(htmlContent);
                }
                // added new user to connected users
                if(isAdmin === 'false') {
                    $('#connected-users').html(`<li class="list-group-item connected-user">${userName}</li>`);
                }
            }).catch(err => {
                console.log(err);
            })
        })
        socket.on('disconnect', function() {
            socket.emit('leave:session', {sessionId, userId});
        });
        // 2. This code loads the IFrame Player API code asynchronously.
        const tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        const firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        let player;
        function onYouTubeIframeAPIReady() {
            const videoId = $('#videoId').val();
          player = new YT.Player('player', {
            height: '500',
            width: '850',
            videoId,
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange
            },
            playerVars: {
                autoplay: 0,
                controls: 0,
                disablekb: 1,
                modestbranding: 1,
                enablejsapi: 1,
                origin: 'http://localhost:3000',
                rel:0,
                showinfo: 0
            }
          });
        }
        function sliderLoop() {
            if(!player) {
                return;
            }

            setInterval(() => {
                const currentTime = player.getCurrentTime();
                const duration = player.getDuration();
                const percentage = (currentTime/duration)*100;
                document.getElementById('myRange')
                .setAttribute('value', percentage);
            }, 200);
        }
        document.querySelector('#pauseBtn')
            .addEventListener('click', function(e) {
                socket.emit(`event`, {state: 'PAUSE', time: player.getCurrentTime(), sessionId});
                player.pauseVideo();
            });
        document.getElementById('myRange')
            .addEventListener('change', function (e) {
                const value = e.target.valueAsNumber;
                const duration = player.getDuration();
                const actualTime = duration * value / 100;
                socket.emit('event', {state: 'SEEK', time: actualTime, sessionId});
                console.log(actualTime);
                player.seekTo(actualTime);
            })
        document.querySelector('#playBtn')
            .addEventListener('click', function(e) {
                socket.emit('event', {state: 'PLAY', time: player.getCurrentTime(), sessionId});
                player.playVideo();
            });
        socket.on('event', function(data) {
            console.log(data);
            if (player) {
                if(data.state === 'PLAY') {
                    player.seekTo(data.time);
                    player.playVideo();
                }else if(data.state === 'PAUSE') {
                    player.seekTo(data.time);
                    player.pauseVideo();
                }else if(data.state === 'SEEK') {
                    player.seekTo(data.time);
                }
            }
        });

        socket.on('session:ended', function (data) {
            player.stopVideo();
            swal('Session Ended By Admin').then(() => {
                window.location.href = '/';
            });
        });

        socket.on('joined:session', function (data) {
            console.log('data', data);
            const {connectedUsers} = data;
            let htmlContent = '';
            connectedUsers.forEach((user) => {
                htmlContent += `
                <li class="list-group-item connected-user">${user}</li>
                `
            });
            $('#connected-users').html(htmlContent);
            console.log(player.getPlayerState());
            console.log(YT.PlayerState.PLAYING);
            if(player.getPlayerState() === YT.PlayerState.PLAYING)
            setTimeout(() => {
                socket.emit('event', {state: 'SEEK', time: player.getCurrentTime()+ 3, sessionId});
            }, 3000);
        });

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            sliderLoop();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        function onPlayerStateChange(event) {

        }
        function stopVideo() {
        }

        $('#endSession').click(function (e) {
            player.stopVideo();
            socket.emit('end:session', {sessionId});
            swal('Session Ended').then(() => {
                window.location.href = '/';
            });
        });

        new ClipboardJS('.copyLink');
    </script>
</body>
</html>
