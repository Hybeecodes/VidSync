<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Session</title>
    <link rel='stylesheet' href='/stylesheets/bootstrap.min.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
</head>
<body>
    <div class="header">
        <%- include('partials/guest_navbar');%>
    </div>
    <div class="row session-panel">
        <div class="col-7 video">
            <!--            <h2>Video Display</h2>-->
            <div id="player" style="pointer-events: none;" ></div> <br>
            <div class="row">
                <div class="col-2">
                    <button id="playBtn">
                        <svg class="bi bi-play-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 010 1.393z" style="color: #007bff;"/>
                          </svg>
                    </button>
                    <button id="pauseBtn">
                        <svg class="bi bi-pause-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path d="M5.5 3.5A1.5 1.5 0 017 5v6a1.5 1.5 0 01-3 0V5a1.5 1.5 0 011.5-1.5zm5 0A1.5 1.5 0 0112 5v6a1.5 1.5 0 01-3 0V5a1.5 1.5 0 011.5-1.5z" style="color: #007bff;"/>
                          </svg>
                    </button>

                </div>
                <div class="col">
                    <div class="slidecontainer">
                        <input type="range" min="0" max="100" value="0" class="slider" id="myRange">
                      </div>
                </div>
            </div>

        </div>
        <!-- <div class="col-4 offset-md-1">
            <div class="card users-panel">
                <div class="card-header" id="connected-users-text">
                    Connected Users
                </div>
                <ul class="list-group list-group-flush connected-users">
                    <li class="list-group-item connected-user">Connected user 1</li>
                    <li class="list-group-item connected-user">Connected user 2</li>
                    <li class="list-group-item connected-user">Connected user 3</li>
                    <li class="list-group-item connected-user">Connected user 4</li>
                    <li class="list-group-item connected-user">Connected user 5</li>
                    <li class="list-group-item connected-user">Connected user 6</li>
                </ul>
                <div class="card-footer">
                    Admin User
                </div>
            </div>
        </div> -->
    </div>


    <script src="/javascripts/jquery-3.4.1.js"></script>
    <script src="/javascripts/bootstrap.min.js"></script>
    <script src="/javascripts/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js"></script>
    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        const tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        const firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        let player;
        function onYouTubeIframeAPIReady() {
          player = new YT.Player('player', {
            height: '500',
            width: '850',
            videoId: '0VFXs8HkQ3Y',
            events: {
              'onReady': onPlayerReady,
              'onStateChange': onPlayerStateChange
            },
            playerVars: {
                autoplay: 1,
                controls: 0,
                disablekb: 1,
                modestbranding: 1,
                enablejsapi: 1,
                origin: 'http://localhost:3000',
                rel:0,
                showinfo: 0
            }
          });
        }
        function sliderLoop() {
            if(!player) {
                return;
            }
            
            setInterval(() => {
                const currentTime = player.getCurrentTime();
                const duration = player.getDuration();
                const percentage = (currentTime/duration)*100;
                document.getElementById('myRange')
                .setAttribute('value', percentage);
                console.log(currentTime, duration)
            }, 200);
        }
        const socket = io('');
        document.querySelector('#pauseBtn')
            .addEventListener('click', function(e) {
                console.log(player);
                socket.emit('event', {state: 'PAUSE', time: player.getCurrentTime()});
            });
        document.getElementById('myRange')
            .addEventListener('change', function (e) {
                console.log('event', e);
                const value = e.target.valueAsNumber;
                const duration = player.getDuration();
                const actualTime = duration * value / 100;
                player.seekTo(actualTime);
            })
        document.querySelector('#playBtn')
            .addEventListener('click', function(e) {
                console.log('ddd')
                socket.emit('event', {state: 'PLAY', time: player.getCurrentTime()});
            });
        socket.on('event', function(data) {
            console.log(data);
            if(data.state === 'PLAY') {
                player.playVideo();
            }else {
                player.pauseVideo();
            }
        });

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            sliderLoop();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        function onPlayerStateChange(event) {
           
        }
        function stopVideo() {
        }
    </script>
</body>
</html>
